(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{184:function(t,e,r){"use strict";r.r(e);var s=r(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("只有一行的协议 : GET方法+要请求的文档的路径,响应是一个超文本文档，没有首部和其他元数据，只有HTML。官方文档："),r("a",{attrs:{href:"https://www.w3.org/Protocols/HTTP/AsImplemented.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("the HTTP Protocol As Implemented In W3"),r("OutboundLink")],1),r("br"),t._v("\n特征如下：")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),r("p",[t._v("1990年代初期，诞生了第一款浏览器，随着web应用爆发，暴露了 http 0.9 的不足。1996年诞生"),r("a",{attrs:{href:"https://www.w3.org/Protocols/HTTP/AsImplemented.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 1.0版本"),r("OutboundLink")],1),t._v("。"),r("br"),t._v("\n关键变化：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),r("p",[t._v("HTTP/1.1 进一步完善了 HTTP 协议，一直用到今天还是最流行的版本。\nHTTP 1.1 加入了很多重要的性能优化:")]),t._v(" "),r("ul",[r("li",[t._v("持久连接")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://foofish.net/http-transfer-encoding.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分块编码传输"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("增强的缓存机制")]),t._v(" "),r("li",[t._v("请求管道")])]),t._v(" "),t._m(8),t._v(" "),r("p",[t._v("2009年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。2015年，HTTP/2 发布。HTTP2.0可以说是SPDY的升级版")]),t._v(" "),t._m(9),t._v(" "),r("p",[t._v("新事物诞生多源于旧事物的痛点，HTTP/2也一样。")]),t._v(" "),r("p",[t._v("SPDY 最初由 Google 开发，2009 年年中发布，主要目标是通过解决 HTTP/1.1 中广为人知的一些性能限制来减少网页的加载延迟。2012 年，该协议得到了 Chrome、Firefox 和 Opera 的支持，越来越多的网站（如 Google、Twitter、Facebook）开始使用SPDY。HTTP 工作组 (HTTP-WG) 随之将此提上议事日程，在SPDY 基础上制定了官方“HTTP/2”标准。2015 年初，IESG 审阅了新的 HTTP/2 标准并批准发布。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),r("p",[t._v("1). HTTP/1.0 默认使用的是短连接，"),r("em",[t._v("每个TCP连接只能发送一个请求")]),t._v("。TCP连接的新建成本很高，需要客户端和服务器"),r("a",{attrs:{href:"https://github.com/jawil/blog/issues/14",target:"_blank",rel:"noopener noreferrer"}},[t._v("三次握手"),r("OutboundLink")],1),t._v("，同时还存在"),r("a",{attrs:{href:"https://hpbn.co/building-blocks-of-tcp/#slow-start",target:"_blank",rel:"noopener noreferrer"}},[t._v("慢启动问题"),r("OutboundLink")],1),t._v("。"),r("br"),t._v("\n一个 TCP 连接发送的 HTTP 请求所花的总时间，最少等于两次网络往返的时间:一次用于握手，一次用于请求和响应。另外还有服务器处理请求的时间。"),r("br"),t._v("\n1.0中使用持久连接需要设置Connection: keep-alive，直到客户端或服务器主动关闭。\n"),r("img",{attrs:{src:"images/TCP.png",alt:""}})]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),r("p",[t._v("1）HTTP/1.1支持请求管道（Pipelining）。  可以同时发送多个请求，但HTTP/1.x有严格的串行返回响应机制，即前一个响应没有完成，下一个响应就不能返回，如果第一个响应时间很长，后续响应处理完了也无法发送，只能被缓存起来，占用服务器内存。即"),r("a",{attrs:{href:"https://community.akamai.com/customers/s/article/How-does-HTTP-2-solve-the-Head-of-Line-blocking-HOL-issue?language=en_US",target:"_blank",rel:"noopener noreferrer"}},[t._v("线头阻塞问题（Head-of-line blocking）"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("请求管道的问题：")]),t._v(" "),t._m(14),t._v(" "),r("p",[t._v("由于存在这些以及其他类似的问题，而 HTTP 1.1 标准中也未对此做出说明，HTTP 管道技术的应用非常有限。一些支持管道的浏览器，通常都将其作为一个高级配置选项，但大多数浏览器都会禁用它。")]),t._v(" "),t._m(15),t._v(" "),r("p",[t._v("由于HTTP1.X不支持多路复用，实际情况是浏览器允许并行打开多个TCP会话。\n但是浏览器对于同一个域名会由最大连接限制（这个根据浏览器内核不同可能会有所差异一般6个8个等），超过浏览器最大连接数限制，后续请求就会被阻塞。")]),t._v(" "),r("p",[t._v("由于并行连接的限制，产生"),r("a",{attrs:{href:"http://web.jobbole.com/85579/",target:"_blank",rel:"noopener noreferrer"}},[t._v("域名划分"),r("OutboundLink")],1),t._v(":手工将所有资源分散到多个子域名,由于主机名称不一样了，就可以突破浏览器的连接限制，实现更高的并行能力。域名分区使用得越多，并行能力就越强!")]),t._v(" "),r("p",[t._v("域名划分面对的问题：")]),t._v(" "),t._m(16),t._v(" "),r("p",[t._v("如何计算最优的分区数目，很难回答。因为没有简单的方程式。取决于页面中资源的数量(每个页面都可能不一样)，以及客户端连接的可用带宽和延迟 (因客户端而异)。需要在调查的基础上做出预测，然后使用固定数量的分区。")]),t._v(" "),r("p",[t._v("这些限制并不是致命的，但是随着网络应用的范围、复杂性以及在我们日常生活中的重要性不断增大，它们对网络开发者和用户都造成了巨大负担，而这正是 HTTP/2 要致力于解决的：\nhttp2标准于2015年2月获得批准，大多数高版本的浏览器已经支持它。"),r("a",{attrs:{href:"https://caniuse.com/#search=http2",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看支持情况"),r("OutboundLink")],1),t._v(" "),r("img",{attrs:{src:"images/h2compatibility.png",alt:""}})]),t._v(" "),t._m(17),t._v(" "),r("p",[r("a",{attrs:{href:"https://http2.akamai.com/demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo对比"),r("OutboundLink")],1),r("br"),t._v("\n效果图\n"),r("img",{attrs:{src:"images/demo.png",alt:""}})]),t._v(" "),r("p",[t._v("观察实际效果，可以发现H2的优势非常明显。")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),r("p",[t._v("在 HTTP 1.x 中，使用多个 TCP 连接实现多个请求并行。但服务器的串行响应导致队首阻塞，从而造成底层TCP连接的效率低下。HTTP 2.0 实现了多向请求和响应: 同域名下所有请求都在单个TCP连接上完成，单个连接可以承载任意数量的双向数据流。同时解决了建立多个TCP连接的消耗，也解决了线头阻塞问题。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),r("p",[t._v("HTTP/2 所有性能增强的核心在于新的二进制分帧层。\n首先了解几个相关概念")]),t._v(" "),t._m(27),t._v(" "),r("p",[t._v("这些概念的关系总结如下：")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),r("p",[t._v("每个 HTTP 传输都承载一组标头，这些标头说明了传输的资源及其属性。 在 HTTP/1.x 中，此元数据始终以纯文本形式，通常会给每个传输增加 500–800 字节的开销。如果使用 HTTP Cookie，增加的开销有时会达到上千字节。为了减少此开销和提升性能，HTTP/2 使用 HPACK 压缩格式压缩请求和响应标头元数据，这种格式采用两种简单但是强大的技术：")]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),r("p",[t._v("在HTTP1.1资源内嵌这种优化方式：将 CSS 内嵌在 HTML，使用 data URI 将二进制数据嵌入到 CSS ／ HTML 中等，以减少浏览器拉取外部资源的等待时间。但资源内嵌，就不能做独立缓存。HTML每次更新，则内嵌资源也要每次更新。")]),t._v(" "),r("p",[t._v("对于将资源手动内联到文档中的过程，我们实际上是在将资源推送给客户端，而不是等待客户端请求。使用 HTTP/2，我们不仅可以实现相同结果，还会获得其他性能优势。 推送资源可以进行以下处理：")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),r("p",[t._v("Web 服务器怎样知道客户端需要什么，如果推送了不必要的资源——比如某个资源已经被浏览器缓存——不仅不能提升加载速度还会造成网络带宽的浪费。")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.w3.org/TR/preload/",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3C"),r("OutboundLink")],1),t._v("建议了依赖资源的两种做法")])]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),r("p",[t._v("HTTP 2.0 通过将一个 TCP 连接的吞吐量最大化来提升性能。事实上，在 HTTP 2.0 之下再使用多个连接(比如域名分区)反倒成了一种反模式，因为多个连接 会抵消新协议中首部压缩和请求优先级的效用。")]),t._v(" "),t._m(42),t._v(" "),r("p",[t._v("打包资源的缺点很多，比如缓存失效、占用内存、延缓执行，以及增加应用复杂性。有了 HTTP 2.0，很多小资源都可以并行发送，导致打包资源的效率反而更低。")]),t._v(" "),t._m(43),t._v(" "),r("p",[t._v("之前针对 HTTP 1.x 而嵌入的大多数资源，都可以而且应该通过服务器推送来交付。这样一来，客户端就可以分别缓存每个资源，并在页面间实现重用，而不必把它们放到每个页面里了。")]),t._v(" "),r("p",[t._v("杜绝和忘记域名分区、文件拼接、图片精灵等不良的习惯，这些做法在 HTTP 2.0 之上完全没有必要。")]),t._v(" "),t._m(44),t._v(" "),t._m(45)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"http2介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http2介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP2介绍")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_1-http发展历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-http发展历史","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. HTTP发展历史")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("HTTP是建立在TCP之上的应用层协议，是现代web的基础。\n"),e("img",{attrs:{src:"images/http-history.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_1-http-0-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-0-9","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. HTTP 0.9")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("客户端 / 服务器、请求 / 响应协议")]),this._v(" "),e("li",[this._v("ASCII 协议，运行于 TCP/IP 链接之上")]),this._v(" "),e("li",[this._v("设计用来传输超文本文档(HTML)")]),this._v(" "),e("li",[this._v("服务器与客户端之间的连接在每次请求之后都会关闭")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_2-http-1-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-1-0","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. HTTP/1.0")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("响应内容类型不局限于超文本HTML")]),this._v(" "),e("li",[this._v("增加了除GET之外的命令")]),this._v(" "),e("li",[this._v("请求、响应由多行首部字段构成，描述元数据")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_3-http-1-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-1-1","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. HTTP/1.1")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_4-http-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. HTTP/2")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_2-http2产生背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-http2产生背景","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. HTTP2产生背景")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_3-http1-x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-http1-x","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. HTTP1.X")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"一-短链接-持久链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-短链接-持久链接","aria-hidden":"true"}},[this._v("#")]),this._v(" (一)短链接&持久链接")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("HTTP/1.1 默认使用持久连接，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点。不过，由于 HTTP 协议采用请求-响应的模型，在一个 TCP 连接上，同一个时刻只能有一个请求，请求发送后，客户端必须等待返回。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"二-请求管道"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-请求管道","aria-hidden":"true"}},[this._v("#")]),this._v(" (二)请求管道")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("并行处理请求时，服务器必须缓冲管道中的响应，从而占用服务器资源，如果有个响应非常大，则很容易形成服务器的受攻击面;"),e("br"),this._v("\n响应失败可能终止 TCP 连接，从页强迫客户端重新发送对所有后续资源的请求，导致重复处理;"),e("br"),this._v("\n由于可能存在中间代理，因此检测管道兼容性，确保可靠性很重要;"),e("br"),this._v("\n如果中间代理不支持管道，那它可能会中断连接，也可能会把所有请求串联起来。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"三-并发tcp连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-并发tcp连接","aria-hidden":"true"}},[this._v("#")]),this._v(" (三)并发TCP连接")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("每个新主机名都要求有一次额外的 DNS 查询")]),this._v(" "),e("li",[this._v("每多一个套接字都会多消耗两端的一些资源")]),this._v(" "),e("li",[this._v("必须手工分离这些资源，并分别把它们托管到多个主机上。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_4-http2优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-http2优势","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. HTTP2优势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_5-http2新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-http2新特性","aria-hidden":"true"}},[this._v("#")]),this._v(" 5. HTTP2新特性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"一-多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-多路复用","aria-hidden":"true"}},[this._v("#")]),this._v(" (一)多路复用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_1-什么是多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是多路复用","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.什么是多路复用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("同一域名只有一个TCP连接")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("HTTP1.1的请求（并发TCP连接）\n"),e("img",{attrs:{src:"images/h1.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("HTTP 2的请求（单一TCP连接）\n"),e("img",{attrs:{src:"images/h2.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("http/2多路复用与HTTP1.1持久连接")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"images/http1-vs-http2.png",alt:""}}),this._v(" "),e("em",[this._v("HTTP/1.1，请求响应只能依次发送，而不能同时。")]),this._v(" "),e("em",[this._v("HTTP/2，请求响应可以不按顺序发送")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_2-多路复用是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-多路复用是如何实现的","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.多路复用是如何实现的")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。"),e("br"),this._v("\n消息：与逻辑请求或响应消息对应的完整的一系列帧。"),e("br"),this._v("\n帧：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。"),e("br"),this._v("\n每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。"),e("br"),this._v("\n每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。"),e("br"),this._v("\n帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载，等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"images/stream.png",alt:""}}),this._v("\n客户端正在向服务器传输一个 DATA 帧（数据流 5），与此同时，服务器正向客户端交错发送数据流 1 和数据流 3 的一系列帧。因此，一个连接上同时有三个并行数据流。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"二-头信息压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-头信息压缩","aria-hidden":"true"}},[this._v("#")]),this._v(" (二)头信息压缩")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("这种格式支持通过静态 Huffman 代码对传输的标头字段进行编码，从而减小了各个传输的大小。")]),this._v(" "),e("li",[this._v("这种格式要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码。\n利用 Huffman 编码，可以在传输时对各个值进行压缩，而利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的标头键值对。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"三-服务器推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-服务器推送","aria-hidden":"true"}},[this._v("#")]),this._v(" (三)服务器推送")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_1-什么是服务器推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是服务器推送","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 什么是服务器推送")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("HTTP/2 新增的另一个强大的新功能是，服务器可以对一个客户端请求发送多个响应。 换句话说，除了对最初请求的响应外，服务器还可以向客户端推送额外资源，而无需客户端明确地请求。\n"),e("img",{attrs:{src:"images/serverPush.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_2-服务器推送解决了什么问题："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务器推送解决了什么问题：","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.服务器推送解决了什么问题：")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("由客户端缓存")]),t._v(" "),r("li",[t._v("在不同页面之间重用")]),t._v(" "),r("li",[t._v("与其他资源一起复用")]),t._v(" "),r("li",[t._v("由服务器设定优先级")]),t._v(" "),r("li",[t._v("被客户端拒绝")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_3-推送实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-推送实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.推送实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"images/preload.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所有服务器推送数据流都由 PUSH_PROMISE 帧发起，表明了服务器向客户端推送所述资源的意图，并且需要先于请求推送资源的响应数据传输。"),e("br"),this._v("\n在客户端接收到 PUSH_PROMISE 帧后，它可以根据自身情况选择拒绝数据流（通过 RST_STREAM 帧）。"),e("br"),this._v("\n。客户端可以限制并行推送的数据流数量；可以通过设置SETTINGS_ENABLE_PUSH为0值通知服务器端禁用推送。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_6-开发者启示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-开发者启示","aria-hidden":"true"}},[this._v("#")]),this._v(" 6. 开发者启示")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_1-每个来源使用一个连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-每个来源使用一个连接","aria-hidden":"true"}},[this._v("#")]),this._v(" 1).每个来源使用一个连接")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_2-去掉不必要的文件合并和图片拼接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-去掉不必要的文件合并和图片拼接","aria-hidden":"true"}},[this._v("#")]),this._v(" 2). 去掉不必要的文件合并和图片拼接")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"_3-利用服务器推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-利用服务器推送","aria-hidden":"true"}},[this._v("#")]),this._v(" 3). 利用服务器推送")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_7-附录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-附录","aria-hidden":"true"}},[this._v("#")]),this._v(" 7. 附录")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("chrome浏览器插件HTTP/2 and SPDY indicator，蓝色的小图标亮起，就表示该网站使用了 HTTP/2 协议。"),e("br"),this._v("\n启用H2网站：https://www.google.com、https://www.aliyun.com")])}],!1,null,null,null);e.default=a.exports}}]);